<?xml version="1.0"?>
<robot name="novamob"
  xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Define robot constants -->
  <xacro:property name="base_width" value="0.225"/>
  <xacro:property name="base_length" value="0.251"/>
  <xacro:property name="base_height" value="0.135"/>

  <xacro:property name="platform_1_height" value="0.07"/>
  <xacro:property name="platform_distance" value="0.0650"/>

  <xacro:property name="wheel_screw" value="0.006"/>
  <xacro:property name="wheel_radius" value="0.03"/>
  <xacro:property name="wheel_width" value="0.03"/>
  <xacro:property name="wheel_ygap" value="0.065"/>
  <xacro:property name="wheel_zoff" value="-0.015"/>
  <xacro:property name="wheel_xoff_front" value="0.045"/>
  <xacro:property name="wheel_xoff_back" value="0.055"/>
  <xacro:property name="wheel_mass" value="0.6"/>

  <xacro:property name="connector_length" value="0.15"/>
  <xacro:property name="connector_width" value="0.015"/>
  <xacro:property name="connector_height" value="0.015"/>

  <xacro:property name="trailer_length" value="${base_length}"/>
  <xacro:property name="trailer_width" value="${base_width}"/>
  <xacro:property name="trailer_height" value="${base_height}"/>


  <!-- Define some commonly used intertial properties  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="wheel_inertia" params="mass radius">
    <inertial>
      <mass value="${mass}"/>
      <inertia ixx="${(2/5) * mass * (radius * radius)}" ixy="0" ixz="0"
                iyy="${(2/5) * mass * (radius * radius)}" iyz="0"
                izz="${(2/5) * mass * (radius * radius)}" />
    </inertial>
  </xacro:macro>

  <!-- Robot Base -->
  <link name="base_link">
    <visual>
      <geometry>
        <mesh filename="file://$(find novamob_nav2_gz)/meshes/novamob_no_wheels_centered.obj" scale="0.001 0.001 0.001"/>

      </geometry>
      <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>

    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 ${base_height/2}"/>
    </collision>

    <xacro:box_inertia m="15" w="${base_width}" d="${base_length}" h="${base_height}"/>

  </link>

  <!-- Robot Footprint -->
  <link name="base_footprint">
    <xacro:box_inertia m="0" w="0" d="0" h="0"/>
  </link>

  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="0.0 0.0 ${-(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
  </joint>

  <!-- Wheels -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect wheel_set mesh_filename">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <mesh filename="${mesh_filename}" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 ${((wheel_radius/2)+wheel_screw)*y_reflect} 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:wheel_inertia mass="${wheel_mass}" radius="${wheel_radius}"/>
    </link>

    <gazebo reference="${prefix}_link">
        <mu1>0.1</mu1>
        <mu2>0.1</mu2>
    </gazebo>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_set} ${y_reflect*wheel_ygap} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>

    </joint>
  </xacro:macro>

  <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" wheel_set="${wheel_xoff_back}" mesh_filename="file://$(find novamob_nav2_gz)/meshes/novamob_mecanum_wheel_centered_left.obj" />
  <xacro:wheel prefix="drivewhl2_l" x_reflect="1" y_reflect="1" wheel_set="${wheel_xoff_front}"  mesh_filename="file://$(find novamob_nav2_gz)/meshes/novamob_mecanum_wheel_centered_left.obj"/>
  <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" wheel_set="${wheel_xoff_back}"  mesh_filename="file://$(find novamob_nav2_gz)/meshes/novamob_mecanum_wheel_centered_right.obj"/> 
  <xacro:wheel prefix="drivewhl2_r" x_reflect="1" y_reflect="-1" wheel_set="${wheel_xoff_front}" mesh_filename="file://$(find novamob_nav2_gz)/meshes/novamob_mecanum_wheel_centered_right.obj"/>



  <!--                TRAILER             -->

  <!-- Trailer wheel macro -->
  <xacro:macro name="trailer_wheel" params="prefix x_reflect y_reflect wheel_offset">
    <link name="${prefix}_link">
      <visual>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <origin xyz="0 0 0" rpy="${pi/2} ${pi/2} 0"/> 
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>
      
      <collision>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <origin xyz="0 0 0" rpy="${pi/2} ${pi/2} 0"/> 
      </collision>
      
      <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <gazebo reference="${prefix}_link">
      <mu1>0.1</mu1>
      <mu2>0.1</mu2>
    </gazebo>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="trailer_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${(x_reflect * wheel_offset) - (trailer_length/2)} ${y_reflect * (trailer_width / 2 + wheel_width / 2)} ${-trailer_height / 2}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>




<!-- Trailer Connector Link -->
<link name="trailer_connector_link">
  <visual>
    <geometry>
      <box size="${connector_width} ${connector_length} ${connector_height}"/>
    </geometry>
    <origin xyz="-${connector_length/2} 0 0" rpy="0 0 ${pi/2}"/> 
    <material name="cyan">
      <color rgba="1 1 1 1"/>
    </material>
  </visual>

  <collision>
    <geometry>
      <box size="${connector_width} ${connector_length} ${connector_height}"/>
    </geometry>
    <origin xyz="0 0 0" rpy="0 0 ${pi/2}"/> 
  </collision>

  <xacro:box_inertia m="0.1" w="${connector_width}" d="${connector_length}" h="${connector_height}"/>
</link>



  <!-- Trailer connector revolute joint -->
  <joint name="trailer_connector_joint" type="revolute">
    <parent link="base_link"/>
    <child link="trailer_connector_link"/>
    <origin xyz="${(-base_length/2)} 0.0 ${platform_1_height} " rpy="0 0 0"/> 
    <axis xyz="0 0 1"/> 
    <limit effort="100" velocity="2.0" lower="${-pi/4}" upper="${pi/4}"/> 
  </joint>


  <!-- Trailer Link -->
  <link name="trailer_link">
    <visual>
      <geometry>
        <box size="${trailer_length} ${trailer_width} ${trailer_height}"/>
      </geometry>
      <origin xyz="${-(trailer_length/2)} 0 0"/>
      <material name="Blue">
        <color rgba="0 0 1 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="${trailer_length} ${trailer_width} ${trailer_height}"/>
      </geometry>
      <origin xyz="${-(trailer_length/2)} 0 0"/>
    </collision>

    <xacro:box_inertia m="1" w="${trailer_width}" d="${trailer_length}" h="${trailer_height}"/>
  </link>

  <!-- Trailer joint -->
  <joint name="trailer_joint" type="fixed">
    <parent link="trailer_connector_link"/>
    <child link="trailer_link"/>
    <origin xyz="${-(connector_length)} 0 0" rpy="0 0 0"/> <!-- Adjust if needed -->
    <axis xyz="0 0 1"/>
    <limit effort="100" lower="-3.14159" upper="3.14159" velocity="1"/>
  </joint>


  <!-- Trailer Wheels -->
  <xacro:trailer_wheel prefix="trailer_wheel_lf" x_reflect="1" y_reflect="1" wheel_offset="${trailer_length / 4}"/>
  <xacro:trailer_wheel prefix="trailer_wheel_lr" x_reflect="-1" y_reflect="1" wheel_offset="${trailer_length / 4}"/>
  <xacro:trailer_wheel prefix="trailer_wheel_rf" x_reflect="1" y_reflect="-1" wheel_offset="${trailer_length / 4}"/>
  <xacro:trailer_wheel prefix="trailer_wheel_rr" x_reflect="-1" y_reflect="-1" wheel_offset="${trailer_length / 4}"/>



  <!-- IMU -->

  <link name="imu_link">
    <visual>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </visual>

    <collision>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/>
  </link>

  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0.0 0 0.01"/>
  </joint>

  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
      <gz_frame_id>imu_link</gz_frame_id>
      <plugin filename="ignition-gazebo-imu-system" name="ignition::gazebo::systems::Imu">
      </plugin>

      <topic>imu</topic>
      <always_on>true</always_on>
      <update_rate>20</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

  <ros2_control name="IgnitionSystem" type="system">
    <hardware>
      <plugin>ign_ros2_control/IgnitionSystem</plugin>
    </hardware>
    <joint name="drivewhl_l_joint">
      <command_interface name="velocity">
        <param name="min">-1</param>
        <param name="max">1</param>
      </command_interface>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
    <joint name="drivewhl_r_joint">
      <command_interface name="velocity">
        <param name="min">-1</param>
        <param name="max">1</param>
      </command_interface>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
    <joint name="drivewhl2_l_joint">
      <command_interface name="velocity">
        <param name="min">-1</param>
        <param name="max">1</param>
      </command_interface>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
    <joint name="drivewhl2_r_joint">
      <command_interface name="velocity">
        <param name="min">-1</param>
        <param name="max">1</param>
      </command_interface>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
  </ros2_control>


  <gazebo>
    <plugin filename="ign_ros2_control-system" name="ign_ros2_control::IgnitionROS2ControlPlugin">
      <parameters>$(find novamob_nav2_gz)/config/diff_drive_controller_velocity.yaml</parameters>
    </plugin>
  </gazebo>


  <!-- LIDAR -->

  <link name="lidar_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.125"/>
      <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.0254" length="0.0275"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.0254" length="0.0275"/>
      </geometry>
    </visual>
  </link>

  <joint name="lidar_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_link"/>
    <origin xyz="0 0 ${base_height + (0.0275/2)}" rpy="0 0 0"/>
  </joint>

  <gazebo reference="lidar_link">
    <sensor name="lidar" type="gpu_lidar">
      <gz_frame_id>lidar_link</gz_frame_id>
      <topic>scan</topic>
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>10</update_rate>
      <lidar>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1.000000</resolution>
            <min_angle>0.000000</min_angle>
            <max_angle>6.280000</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.150000</min>
          <max>12</max>
          <resolution>0.015000</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </lidar>
    </sensor>
  </gazebo>


  <link name="camera_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.030 0.124 0.030"/>
      </geometry>
    </visual>


    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.030 0.124 0.030"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.135"/>
      <inertia ixx="${(1/12) * 0.135 * ((0.124  * 0.124)  + (0.030 * 0.030))}" ixy="0.0" ixz="0.0"
                iyy="${(1/12) * 0.135 * ((0.030 * 0.030) + (0.030 * 0.030))}" iyz="0.0"
                izz="${(1/12) * 0.135 * ((0.030 * 0.030) + (0.124  * 0.124))}"/>
    </inertial>
  </link>


  <joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin xyz="0.09 0 ${platform_1_height + (0.022 / 2)}" rpy="0 0 0"/>
  </joint>

  <link name="camera_frame"/>

  <joint name="camera_frame_joint" type="fixed">
    <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    <parent link="camera_link"/>
    <child link="camera_frame"/>
  </joint>

  <gazebo reference="camera_link">
    <sensor name="robot_cam" type="camera">
      <camera>
        <horizontal_fov>1.204</horizontal_fov>  <!-- Horizontal FOV 69° -->
        <vertical_fov>0.73</vertical_fov> <!-- Vertical FOV 42° -->
        <image>
          <width>1920</width>
          <height>1080</height>
        </image>
        <clip>
          <near>0.2</near>
          <far>10</far>
        </clip>
      </camera>
      <always_on>1</always_on>
      <update_rate>30</update_rate>
      <visualize>true</visualize>
      <topic>robot_cam</topic>
      <enable_metrics>true</enable_metrics>
    </sensor>
    <sensor name="depth_camera1" type="depth_camera">
      <update_rate>90</update_rate>
      <topic>depth_camera</topic>
      <visualize>true</visualize>
      <alwaysOn>true</alwaysOn>
      <camera>
        <horizontal_fov>1.518</horizontal_fov>  <!-- Horizontal FOV 87° -->
        <vertical_fov>1.01</vertical_fov> <!-- Vertical FOV 58° -->
        <image>
          <width>1280</width>
          <height>720</height>
          <format>R_FLOAT32</format>
        </image>
        <clip>
          <near>0.2</near>
          <far>10</far>
        </clip>
      </camera>
    </sensor>
  </gazebo>
</robot>
