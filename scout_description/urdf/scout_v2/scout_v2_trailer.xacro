<?xml version="1.0"?>

<robot name="scout_v2" 
    xmlns:xacro="http://ros.org/wiki/xacro">

    <xacro:arg name="robot_namespace" default="/" /> 

    <xacro:include filename="$(find scout_description)/urdf/scout_v2/scout_wheel_type1.xacro" />
    <xacro:include filename="$(find scout_description)/urdf/scout_v2/scout_wheel_type2.xacro" />

    <!-- Variables -->
    <xacro:property name="M_PI" value="3.14159"/>

    <!-- Vehicle Geometries -->
    <xacro:property name="base_x_size" value="0.9250000" />
    <xacro:property name="base_y_size" value="0.380000" />
    <xacro:property name="base_z_size" value="0.210000" />

    <xacro:property name="wheelbase" value="0.498" />
    <xacro:property name="track" value="0.58306" />
    <xacro:property name="wheel_vertical_offset" value="-0.0702" />

    <xacro:property name="wheel_length" value="1.1653e-01" />
    <xacro:property name="wheel_radius" value="1.6459e-01" />
    <xacro:property name="wheel_mass" value="0.6"/>


    <xacro:property name="trailer_wheel_length" value="0.045" />
    <xacro:property name="trailer_wheel_radius" value="0.065" />
    <xacro:property name="trailer_wheel_mass" value="0.6"/>

    <xacro:property name="connector_length" value="0.15"/>
    <xacro:property name="connector_width" value="0.015"/>
    <xacro:property name="connector_height" value="0.015"/>

    <xacro:property name="trailer_length" value="0.55"/>
    <xacro:property name="trailer_width" value="0.4"/>
    <xacro:property name="trailer_height" value="${base_z_size}"/>



    <!-- Define inertial property macros  -->
    <xacro:macro name="box_inertia" params="m w h d">
        <inertial>
        <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
        <mass value="${m}"/>
        <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <mass value="${m}"/>
        <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r">
        <inertial>
        <mass value="${m}"/>
        <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="wheel_inertia" params="mass radius">
        <inertial>
        <mass value="${mass}"/>
        <inertia ixx="${(2/5) * mass * (radius * radius)}" ixy="0" ixz="0"
                    iyy="${(2/5) * mass * (radius * radius)}" iyz="0"
                    izz="${(2/5) * mass * (radius * radius)}" />
        </inertial>
    </xacro:macro>

    <!-- Base link -->
    <link name="base_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <mesh filename="file://$(find scout_description)/meshes/scout_v2/base_link.dae" />
            </geometry>
        </visual>
        <collision>
            <origin xyz="0 0 0.008" rpy="0 0 0" />
            <geometry>
                <box size="${base_x_size} ${base_y_size} ${base_z_size}"/>
            </geometry>
        </collision>
        <collision>
            <origin xyz="0 0 ${base_z_size/6}" rpy="0 0 0" />
            <geometry>
                <box size="${base_x_size/6} ${base_y_size*1.65} ${base_z_size/3}"/>
            </geometry>
        </collision>
    </link>

    <link name="base_footprint"/>

    <joint name="base_footprint_joint" type="fixed">
        <origin xyz="0 0 ${wheel_vertical_offset - wheel_radius}" rpy="0 0 0" />
        <parent link="base_link" />
        <child link="base_footprint" />
    </joint>

    <link name="inertial_link">
        <inertial>
            <mass value="40" />
            <origin xyz="0.0 0.0 0.0" />
            <inertia ixx="2.288641" ixy="0" ixz="0" iyy="5.103976" iyz="0" izz="3.431465" />
        </inertial>
    </link>

    <joint name="inertial_joint" type="fixed">
        <origin xyz="0 0 0" rpy="0 0 0" />
        <parent link="base_link" />
        <child link="inertial_link" />
    </joint>

    <!-- Scout wheel macros -->
    <!-- wheel labeled from 0 to 3, conter-clockwise, starting from front right wheel -->
    <!-- motor 1 and 2 (left side) are mechanically installed in a reversed direction -->
    <xacro:scout_wheel_type1 wheel_prefix="front_right">
        <origin xyz="${wheelbase/2} ${-track/2} ${wheel_vertical_offset}" rpy="3.14 0 0" />
    </xacro:scout_wheel_type1>
    <xacro:scout_wheel_type2 wheel_prefix="front_left">
        <origin xyz="${wheelbase/2} ${track/2} ${wheel_vertical_offset}" rpy="3.14 0 0" />
    </xacro:scout_wheel_type2>
    <xacro:scout_wheel_type1 wheel_prefix="rear_left">
        <origin xyz="${-wheelbase/2} ${track/2} ${wheel_vertical_offset}" rpy="3.14 0 0" />
    </xacro:scout_wheel_type1>
    <xacro:scout_wheel_type2 wheel_prefix="rear_right">
        <origin xyz="${-wheelbase/2} ${-track/2} ${wheel_vertical_offset}" rpy="3.14 0 0" />
    </xacro:scout_wheel_type2>



    <!--                TRAILER             -->

    <!-- Trailer wheel macro -->
    <xacro:macro name="trailer_wheel" params="prefix x_reflect y_reflect wheel_offset">
        <link name="${prefix}_link">
        <visual>
            <geometry>
            <cylinder radius="${trailer_wheel_radius}" length="${trailer_wheel_length}"/>
            </geometry>
            <origin xyz="0 0 0" rpy="${pi/2} ${pi/2} 0"/> 
            <material name="Gray">
            <color rgba="0.5 0.5 0.5 1.0"/>
            </material>
        </visual>
        
        <collision>
            <geometry>
            <cylinder radius="${trailer_wheel_radius}" length="${trailer_wheel_length}"/>
            </geometry>
            <origin xyz="0 0 0" rpy="${pi/2} ${pi/2} 0"/> 
        </collision>
        
        <xacro:cylinder_inertia m="${trailer_wheel_mass}" r="${trailer_wheel_radius}" h="${trailer_wheel_length}"/>
        </link>

        <gazebo reference="${prefix}_link">
            <mu1>0.1</mu1>
            <mu2>0.1</mu2>
        </gazebo>

        <joint name="${prefix}_joint" type="continuous">
        <parent link="trailer_link"/>
        <child link="${prefix}_link"/>
        <origin xyz="${(x_reflect * wheel_offset) - (trailer_length/2)} ${y_reflect * (trailer_width / 2 + trailer_wheel_length / 2)} ${-trailer_height / 2}" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
        </joint>
    </xacro:macro>




    <!-- Trailer Connector Link -->
    <link name="trailer_connector_link">
    <visual>
        <geometry>
        <box size="${connector_width} ${connector_length} ${connector_height}"/>
        </geometry>
        <origin xyz="-${connector_length/2} 0 0" rpy="0 0 ${pi/2}"/> 
        <material name="cyan">
        <color rgba="1 1 1 1"/>
        </material>
    </visual>

    <collision>
        <geometry>
        <box size="${connector_width} ${connector_length} ${connector_height}"/>
        </geometry>
        <origin xyz="0 0 0" rpy="0 0 ${pi/2}"/> 
    </collision>

    <xacro:box_inertia m="0.1" w="${connector_width}" d="${connector_length}" h="${connector_height}"/>
    </link>



  <!-- Trailer connector revolute joint -->
  <joint name="trailer_connector_joint" type="revolute">
    <parent link="base_link"/>
    <child link="trailer_connector_link"/>
    <origin xyz="${(-base_x_size/2)} 0 -0.065 " rpy="0 0 0"/> 
    <axis xyz="0 0 1"/> 
    <limit effort="100" velocity="2.0" lower="${-pi/4}" upper="${pi/4}"/> 
  </joint>


  <!-- Trailer Link -->
  <link name="trailer_link">
    <visual>
      <geometry>
        <box size="${trailer_length} ${trailer_width} ${trailer_height}"/>
      </geometry>
      <origin xyz="${-(trailer_length/2)} 0 0"/>
      <material name="Blue">
        <color rgba="0 0 1 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="${trailer_length} ${trailer_width} ${trailer_height}"/>
      </geometry>
      <origin xyz="${-(trailer_length/2)} 0 0"/>
    </collision>

    <xacro:box_inertia m="5" w="${trailer_width}" d="${trailer_length}" h="${trailer_height}"/>
  </link>

  <!-- Trailer joint -->
  <joint name="trailer_joint" type="fixed">
    <parent link="trailer_connector_link"/>
    <child link="trailer_link"/>
    <origin xyz="${-(connector_length)} 0 0" rpy="0 0 0"/> 
    <axis xyz="0 0 1"/>
    <limit effort="100" lower="-3.14159" upper="3.14159" velocity="1"/>
  </joint>


  <!-- Trailer Wheels -->
  <xacro:trailer_wheel prefix="trailer_wheel_lf" x_reflect="1" y_reflect="1" wheel_offset="${trailer_length / 4}"/>
  <xacro:trailer_wheel prefix="trailer_wheel_lr" x_reflect="-1" y_reflect="1" wheel_offset="${trailer_length / 4}"/>
  <xacro:trailer_wheel prefix="trailer_wheel_rf" x_reflect="1" y_reflect="-1" wheel_offset="${trailer_length / 4}"/>
  <xacro:trailer_wheel prefix="trailer_wheel_rr" x_reflect="-1" y_reflect="-1" wheel_offset="${trailer_length / 4}"/>




    <!-- IMU -->



    <link name="imu_link">
        <visual>
        <geometry>
            <box size="0.01 0.01 0.01"/>
        </geometry>
        </visual>

        <collision>
        <geometry>
            <box size="0.01 0.01 0.01"/>
        </geometry>
        </collision>

        <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/>
    </link>

    <joint name="imu_joint" type="fixed">
        <parent link="base_link"/>
        <child link="imu_link"/>
        <origin xyz="0.0 0 0.0"/>
    </joint>

    <gazebo reference="imu_link">
        <sensor name="imu_sensor" type="imu">
        <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
            <ros>
            <!-- <namespace>/demo</namespace> -->
            <remapping>~/out:=imu</remapping>
            </ros>
            <initial_orientation_as_reference>false</initial_orientation_as_reference>
        </plugin>
        <always_on>true</always_on>
        <update_rate>100</update_rate>
        <visualize>true</visualize>
        <imu>
            <angular_velocity>
            <x>
                <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
                </noise>
            </x>
            <y>
                <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
                </noise>
            </y>
            <z>
                <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
                </noise>
            </z>
            </angular_velocity>
            <linear_acceleration>
            <x>
                <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
                </noise>
            </x>
            <y>
                <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
                </noise>
            </y>
            <z>
                <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
                </noise>
            </z>
            </linear_acceleration>
        </imu>
        </sensor>
    
    </gazebo>


    <!-- Diff Drive -->

    <gazebo>
        <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
        <!-- <ros>
            <namespace>/demo</namespace>
        </ros> -->

        <num_wheel_pairs>2</num_wheel_pairs>

        <!--back wheels -->
        <left_joint>front_left_wheel</left_joint>
        <right_joint>front_right_wheel</right_joint>

        <!-- front wheels -->
        <left_joint>rear_left_wheel</left_joint>
        <right_joint>rear_right_wheel</right_joint>

        <!-- kinematics -->
        <wheel_separation>${track}</wheel_separation>
        <wheel_diameter>${wheel_radius*2}</wheel_diameter>
        <wheel_separation>${track}</wheel_separation>
        <wheel_diameter>${wheel_radius*2}</wheel_diameter>

        <!-- limits -->
        <max_wheel_torque>1000</max_wheel_torque>
        <max_wheel_acceleration>1.0</max_wheel_acceleration>
        <updateRate>100</updateRate>

        <covariance_x>0.000100</covariance_x>
        <covariance_y>0.000100</covariance_y>
        <covariance_yaw>0.010000</covariance_yaw>


        <!-- output -->
        <publish_odom>true</publish_odom>
        <publish_odom_tf>false</publish_odom_tf>
        <publish_wheel_tf>true</publish_wheel_tf>

        <odometry_frame>odom</odometry_frame>
        <robot_base_frame>base_link</robot_base_frame>
        </plugin>
    </gazebo>


<!--     <gazebo>
        <plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
        
            <updateRate>100.0</updateRate>
            <robotNamespace></robotNamespace>
            <leftFrontJoint>front_left_wheel</leftFrontJoint>
            <rightFrontJoint>front_right_wheel</rightFrontJoint>
            <leftRearJoint>rear_left_wheel</leftRearJoint>
            <rightRearJoint>rear_right_wheel</rightRearJoint>
            <wheelSeparation>4</wheelSeparation>
            <wheelDiameter>0.32918</wheelDiameter>
            <robotBaseFrame>base_link</robotBaseFrame>
            <torque>1000</torque>
            <commandTopic>cmd_vel</commandTopic>
            <broadcastTF>true</broadcastTF>
            <odometryTopic>odom</odometryTopic>
            <odometryFrame>odom</odometryFrame>
            <covariance_x>0.000100</covariance_x>
            <covariance_y>0.000100</covariance_y>
            <covariance_yaw>0.010000</covariance_yaw>
        </plugin>
    </gazebo> -->


    <!-- LIDAR -->


    <link name="lidar_link">
        <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="0.125"/>
        <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
        </inertial>

        <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <cylinder radius="0.0254" length="0.0275"/>
        </geometry>
        </collision>

        <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <cylinder radius="0.0254" length="0.0275"/>
        </geometry>
        </visual>
    </link>

    <joint name="lidar_joint" type="fixed">
        <parent link="base_link"/>
        <child link="lidar_link"/>
        <origin xyz="0.4 0 ${(base_z_size/2) + 0.02 + 0.0275}" rpy="0 0 0"/>
    </joint>

    <gazebo reference="lidar_link">
        <sensor name="lidar" type="ray">
        <always_on>true</always_on>
        <visualize>false</visualize>
        <update_rate>5</update_rate>
        <ray>
            <scan>
            <horizontal>
                <samples>360</samples>
                <resolution>1.000000</resolution>
                <min_angle>0.000000</min_angle>
                <max_angle>6.280000</max_angle>
            </horizontal>
            </scan>
            <range>
            <min>0.150000</min>
            <max>12</max>
            <resolution>0.015000</resolution>
            </range>
            <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
            </noise>
        </ray>
        <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
            <ros>
            <remapping>~/out:=scan</remapping>
            </ros>
            <output_type>sensor_msgs/LaserScan</output_type>
            <frame_name>lidar_link</frame_name>
        </plugin>
        </sensor>
    </gazebo>

    <!-- Camera/Deph Sensor -->


    <link name="camera_link">
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
        <box size="0.030 0.124 0.030"/>
        </geometry>
    </visual>

    <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
        <box size="0.030 0.124 0.030"/>
        </geometry>
    </collision>

    <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="0.135"/>
        <inertia ixx="${(1/12) * 0.135 * ((0.124  * 0.124)  + (0.030 * 0.030))}" ixy="0.0" ixz="0.0"
                iyy="${(1/12) * 0.135 * ((0.030 * 0.030) + (0.030 * 0.030))}" iyz="0.0"
                izz="${(1/12) * 0.135 * ((0.030 * 0.030) + (0.124  * 0.124))}"/>
    </inertial>
    </link>

    <joint name="camera_joint" type="fixed">
        <parent link="base_link"/>
        <child link="camera_link"/>
        <origin xyz="0.4 0 ${(base_z_size/2) + 0.02}" rpy="0 0 0"/>
    </joint>

    <link name="camera_depth_frame"/>

    <joint name="camera_depth_joint" type="fixed">
        <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
        <parent link="camera_link"/>
        <child link="camera_depth_frame"/>
    </joint>

    <gazebo reference="camera_link">
        <sensor name="depth_camera" type="depth">
        <visualize>true</visualize>
        <update_rate>30.0</update_rate>
        <camera name="camera">
            <horizontal_fov>1.50098</horizontal_fov>
            <image>
            <width>640</width>
            <height>480</height>
            <format>R8G8B8</format>
            </image>
            <clip>
            <near>0.05</near>
            <far>3</far>
            </clip>
        </camera>
        <plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
            <baseline>0.2</baseline>
            <alwaysOn>true</alwaysOn>
            <updateRate>0.0</updateRate>
            <frame_name>camera_depth_frame</frame_name>
            <pointCloudCutoff>0.3</pointCloudCutoff>
            <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
            <distortionK1>0</distortionK1>
            <distortionK2>0</distortionK2>
            <distortionK3>0</distortionK3>
            <distortionT1>0</distortionT1>
            <distortionT2>0</distortionT2>
            <CxPrime>0</CxPrime>
            <Cx>0</Cx>
            <Cy>0</Cy>
            <focalLength>0</focalLength>
            <hackBaseline>0</hackBaseline>
        </plugin>
        </sensor>
    </gazebo>



</robot>
